{"name":"Modalio","tagline":"Tiny plugin to display, generate, embed, populate, queue, stack or asynchronously load content into modals. Super fast, 100% style-free!","body":"## Modalio\r\n\r\n### A high *and* low-level library to create and manage in-page modals.\r\n\r\n\r\n**Modalio** is a tiny library to display, generate, embed, populate, queue, stack or asynchronously load content into modals.\r\nIt’s super fast and 100% style-free.\r\n\r\nI consider it a low-level plugin *and* a high-level one: it can be used *as-is* or extended, styled and customized in behaviour and appearance. In fact, very little default CSS is used, and it’s 100% overridable.\r\n\r\nIt differs from most other modal libraries because it even allows the injection of *already-in-page* elements, keeping their event bindings, data-properties and edit status (e.g. inputs).\r\n\r\nAnother really great feature is stacking: three policies are offered (queue|stack|swap), allowing you to open a modal with the default policy, or a per-modal overridden one. This way, you can choose how to handle the opening of multiple modals at once.\r\n\r\n\r\n### Main features:\r\n\r\n- 3 stacking policies offered\r\n- Out-of-DOM persistence: closed modals are detached from DOM to lower memory consumption, but their state is retained for eventual reopening\r\n- Simple templating engine to clone and populate an empty, structured DOM element used as a template\r\n- Flash message support: you can flag a modal to be automatically opened upon page load\r\n- `window.alert()` replacement for quick informational messages\r\n- Messages can be differentiated by tipe. Every message type has a template you can define or extend from the default one\r\n- Automatic Close button injection (configurable and templatable)\r\n- Can be triggered programmatically or via DOM element’s attributes, without needing a single line of javascript\r\n- Asynchronous loading of modal’s content\r\n- Open modal get focused upon opening (even if no input elements are inside it)\r\n- Modals can be closed by clicking on their bezel, on elements flagged to behave like close buttons (via data-attributes), by clicking on ESC or ENTER. Every option is configurable on a per-modal basis\r\n- Page scroll is disabled when a modal is open (retaining current scroll position)\r\n- Tested on IE 10+, FF, Chrome, Safari, Mobile Safari\r\n- Needs jQuery 1.8+\r\n- When a modal is closed, you can choose whether to process the queue stack (eventually opening the next queued modal) or to clear the queue.\r\n\r\n\r\n### How-to:\r\n\r\nInclude assets in your page (*before* initializing Modalio):\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"modalio.css\">\r\n<script src=\"modalio.js\"></script>\r\n```\r\n\r\nYou have to initialize Modalio *after* document is ready (or by placing `Modalio.init()` in a `script` tag at the very end of your `body` element):\r\n\r\n```js\r\n$(document).ready(function(){\r\n\tModalio.init({options});\r\n});\r\n```\r\n\r\nYou can test Modalio immediately:\r\n\r\n```js\r\nModalio.message('Hello World!');\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}